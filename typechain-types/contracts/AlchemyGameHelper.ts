/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace AlchemyGameHelper {
  export type ElementInfoStruct = {
    id: BigNumberish;
    rarity: BigNumberish;
    discovered: boolean;
    userBalance: BigNumberish;
  };

  export type ElementInfoStructOutput = [
    id: bigint,
    rarity: bigint,
    discovered: boolean,
    userBalance: bigint
  ] & { id: bigint; rarity: bigint; discovered: boolean; userBalance: bigint };
}

export interface AlchemyGameHelperInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_ELEMENT_ID"
      | "game"
      | "getAllElements"
      | "getElementFee"
      | "getPossibleCombinations"
      | "getTotalDiscoveredElements"
      | "getUserElements"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_ELEMENT_ID",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "game", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllElements",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getElementFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPossibleCombinations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDiscoveredElements",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserElements",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_ELEMENT_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "game", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllElements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getElementFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPossibleCombinations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDiscoveredElements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserElements",
    data: BytesLike
  ): Result;
}

export interface AlchemyGameHelper extends BaseContract {
  connect(runner?: ContractRunner | null): AlchemyGameHelper;
  waitForDeployment(): Promise<this>;

  interface: AlchemyGameHelperInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_ELEMENT_ID: TypedContractMethod<[], [bigint], "view">;

  game: TypedContractMethod<[], [string], "view">;

  getAllElements: TypedContractMethod<
    [],
    [AlchemyGameHelper.ElementInfoStructOutput[]],
    "view"
  >;

  getElementFee: TypedContractMethod<
    [elementId: BigNumberish],
    [bigint],
    "view"
  >;

  getPossibleCombinations: TypedContractMethod<
    [elementId: BigNumberish],
    [bigint[]],
    "view"
  >;

  getTotalDiscoveredElements: TypedContractMethod<[], [bigint], "view">;

  getUserElements: TypedContractMethod<
    [user: AddressLike],
    [AlchemyGameHelper.ElementInfoStructOutput[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_ELEMENT_ID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "game"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAllElements"
  ): TypedContractMethod<
    [],
    [AlchemyGameHelper.ElementInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getElementFee"
  ): TypedContractMethod<[elementId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPossibleCombinations"
  ): TypedContractMethod<[elementId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getTotalDiscoveredElements"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserElements"
  ): TypedContractMethod<
    [user: AddressLike],
    [AlchemyGameHelper.ElementInfoStructOutput[]],
    "view"
  >;

  filters: {};
}
